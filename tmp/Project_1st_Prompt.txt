자, 오늘 하루 동안은 내가 1차 프로젝트를 완수하려는 계획이 있어.
그래서 단계별로 나는 너와 함께 과제를 수행해나가고 싶어.
우선 내가 생각하는 단계별 순서는 아래와 같아.
우리는 팀 프로젝트 이기 때문에 각자가 맡은 역할들이 있어.
프로젝트 관련된 설명은 충분히 한 것 같으니깐, 간단하게만 정리해줄께.

다만, 우리가 뭐든지 최선의 결과를 얻기 위해서는 계획 또한 중요하다고 생각해.
그래서 어떻게 하면 이 프로젝트를 완벽하게 하루 동안 할 수 있을지 같이 고민해보자.

너는 나의 환경, 프로그램 등 관련된 사항들을 인지하고 있어야 하는 부분이 있으므로,
그런 부분은 프로젝트 진행을 하기 전에 환경에 대해서 서로 정보 공유가 필요할 것 같아.

1. 나는 윈도우 11 환경에서 지금 시작하고 있어.
2. 우리는 폴더 트리를 올바르게 구성할 필요가 있어.
3. 폴더 트리에 맡게 데이터셋을 저장하고 스크립트를 정리할 필요가 있어.
4. 코딩 작업(데이터베이스, 웹크롤링, 등 구축을 하고 난 뒤) 스트림릿에서 우리는 로컬호스트로 배포를 해야해.
5. 올바르게 깃에 올려서 팀원끼리 공유가 가능해야해.
6. 여기서 팀 프로젝트이기 떄문에 내가 맡은 페이지는 우선 '정비소현황'에 관련한 페이지야.
이 부분을 중점으로 우선 진행을 하고 나면 좋을 것 같아.
하지만, 다른 페이지 또한  내가 개발하는 것은 아니지만, 그 틀은 유지가 되면 좋을 것 같아.
7. 내가 배운 자료를 토대로 학습의 연장선이 되면 좋을 것 같아.
물론 새로운 코드 등을 적용할 필요가 있고 내가 배우지 않은 부분도 있을 수도 있어.
그런 부분은 보충하면서 작업하되, 작업을 이행하면서 보충 설명을 통해서 내가 학습하는 면모에 있어서도 도움이 되면 좋을 것 같아.
8. 코딩 및 데이터 정규화? 와 같은 것은 객관적으로 코딩을 하면 좋을 것 같아. 가장 간결하게 작성하는 것을 위주로 하고 불필요한 코딩은 첨가하지 않는 것으로 한다. 
9. 사전에 필요한 정보가 있으면 사용자로 부터 요구를 통해서 프로젝트에 맞는 커스텀된 정보를 통해서 프로젝트를 진행한다.
>
1. 프로젝트 기획
- 팀 소개
- 프로젝트 소개
- 시장 조사
- 주요 기능
- 기대효과
- 개발환경
위 내용에 해당하는 내용을 정리해줘.
단, 개발환경은 아직 개발이 전체적으로 진행되지 않았기 때문에 현재 내가 설명한 가고자 하는 방향으로 적어주고, 추후에 개발에 있어서 다시 수정 업데이트가 필요할 수도 있어.
또한 팀 소개는 우리는 4팀, 따봉도치 팀이야. 
다른 정보가 필요하니?
그리고 시장 조사는, 나 같은 경우는 정보소 관련 데이터를 이미 너에게 제공했어.
공공데이터포털에서 xml, csv, json 데이터를 받았고, api 또한 받았어
그리고 다른 신차 데이터는 우리는 다나와 신차 데이터에서 크롤링을 할 생각이야.
>
조금은 벗어난 것 같아서 다시 정리해줄께.
# \[3차 미팅] 2025년 8월 31일 (일)

* **팀명** : 🦔 따봉도치 👍
* **참여 인원** : 김민정, 박도연, 박진형, 오흥재, 김준태(Mentor)
* **시간** : 13시 \~ 15시
* **장소** : 디스코드 음성 채널
* **미팅 소요 시간** : 2시간
* **미팅 주제** : 프로젝트 주제에 맞는 소주제 확정, 역할 분담 및 페이지 구성 논의

---

## 📌 논의 내용

### 1. 서비스/브랜딩

* 서비스명: **DOCHICHA.Inc**
* 브랜딩

 **도**: 도로 위 새로운 시작, 당신의 첫 차를 만나는 곳
 **치**: 치밀하게 모은 데이터로 합리적인 선택을 돕고
 **카**: 카라이프의 즐거움을 함께 열어가는 서비스

  * 홈페이지 컬러(**제안**): **Yellow + White 기본**, Dark Mode 시 **Black + Yellow**

---

### 2. 페이지 구성 및 역할

* **\[Home] (공통)**

   메인 이미지/브랜딩 중심 페이지
   도.치.카 브랜드 아이덴티티 강조

* **\[1page – 모든 기업 신차 (출시일 기준)] (담당: 박진형)**

   기능: 필터, 검색
   참고 데이터: [자동차 리콜 통계](https://www.car.go.kr/rs/stats/scList.do) -> 후순위, 빠질 수도 있음.

* **\[2page – 추천 페이지] (담당: 김민정)**

   입력: 연령대, 지역, 차종(SUV, 승용, 전기/수소), 가격
   출력: 데이터 기반 추천, 차트 시각화
   데이터: 연령대별 차종 선호도

* **\[3page – 비교 페이지] (담당: 박도연)**

   기능: 좋아요(최대 3개) → MySQL COUNT 기반 집계
   사이드 페이지: 좋아요 히스토리/집계 확인
   UI: Streamlit 3컬럼 비교

* **\[4page – 정비소 지도] (담당: 오흥재)**

   기능: 분포도 지도, 지역 검색
   기타 아이디어 필요(정비소 추가 정보 표시?)

* **\[5page – 기업 FAQ 연동] (공통)**

   제조사별 FAQ Top N(질문/답변) 제공
   **연결 규칙**: 1page(제조사 선택) ↔ 해당 기업 FAQ 자동 필터링
   **브랜드 예시**: 현대, 기아, 삼성, 수입 브랜드 등

---

### 3. FAQ TOP 질문 리스트 (초안)

신차 구매자 관점 + 제조사 공식 FAQ에서 자주 나오는 항목 기준:

1. **차량 계약 후 해지 시 계약금은 환불되나요?**
2. **장애인 차량 구입 조건 및 절차는 어떻게 되나요?**
3. **차량 구매 시 신용카드는 얼마까지 결제 가능한가요?**
4. **차량 계약 후 예상 납기일은 어떻게 확인할 수 있나요?**
5. **무상 보증 기간 및 주요 보증 항목은 어떻게 되나요?**

(추가 확장 FAQ: 정비/AS 절차, 리콜 접수 방법, 보조금 신청 가이드 등)

---

### 4. 데이터 및 ERD 논의

* **데이터 수집 담당**

   신차 데이터: 박진형
   지역별 연령 분포도: 김민정
   리콜 데이터: 박도연
   정비소 데이터: 오흥재
   기업 FAQ: 공통(각자 브랜드별 URL 확보)

* **ERD 구조 (초안)**

   지역(regionPK) 중심 설계 예상
   신차 ↔ 리콜 데이터: 브랜드, 차종 FK
   정비소 ↔ 차량: 브랜드 FK 가능
   FAQ ↔ 제조사: manu\_id FK

* **컬럼 구상 (예시)**

   신차 데이터: 출시일, 브랜드, 모델명, 차종, 연료, 가격
   리콜 데이터: 브랜드, 모델명, 리콜 횟수, 사유, 발생 연도
   연령별 분포: 지역, 연령대, 차종 선호도, 비율
   정비소 데이터: 상호명, 브랜드, 지역, 위도·경도, 서비스 종류
   FAQ 데이터: menu\_id, 질문, 답변, 카테고리, 수집 URL

>

---

# 2. 프로젝트 개요

## 2.1 프로젝트 명

**DOCHICAR (도치카)**
→ "도로 위 새로운 시작, 당신의 첫 차를 만나는 곳"

---

## 2.2 프로젝트 소개

DOCHICAR은 **신차 구매자**를 위한 데이터 기반 통합 서비스입니다.

* 신차 정보, 가격, 제원 등 핵심 데이터 제공
* 개인 맞춤형 추천 기능 (연령대·지역·예산 기반)
* 차량 비교(최대 3개 모델) 및 사용자 선호 집계
* 전국 정비소 현황 지도 시각화
* 제조사별 FAQ와 리콜 현황 정보 제공

브랜드 아이덴티티는 “**도-치-카**” 세 글자에 각각의 의미를 담아, **데이터와 카라이프의 연결**을 강조합니다.

---

## 2.3 프로젝트 필요성(배경)

* **소비자 측면**

  * 신차 구매 과정에서 **정보가 여러 사이트에 분산** → 일원화된 플랫폼 필요
  * 합리적인 선택을 위해 **가격, 제원, 안전도, 정비소 접근성** 등 종합적 고려가 필요
* **산업/시장 측면**

  * 친환경차(전기/수소차) 증가로 **정비소 네트워크 정보의 중요성 확대**
  * 자동차 제조사들은 FAQ·리콜 공지 등 **고객 지원 데이터를 공개**하고 있으나, 접근성이 낮음
* **학습/교육 측면**

  * 팀원들의 데이터 크롤링, API 활용, DB 구축, Streamlit 시각화 등 **AI 캠프 학습 내용을 종합 적용**
  * 공공데이터포털과 다나와 크롤링을 실제 프로젝트로 연결

---

## 2.4 프로젝트 목표

* **사용자 맞춤형 신차 정보 제공 플랫폼** 구현
* 공공데이터(API)와 크롤링 데이터를 통합하여 **실시간·정적 데이터 혼합 서비스** 구축
* 데이터 정규화 및 DB 설계를 통해 **확장 가능한 구조 확보**
* Streamlit 기반 웹앱으로 **로컬 시연 및 팀 협업 가능**한 MVP 완성
* 향후 운영계정(API) 활용 및 클라우드 배포를 통한 **서비스 확장성 검증**

---

# 🚗 DOCHICHA.Inc 1차 프로젝트 기획서

## 1. 팀 소개

* **팀명**: 따봉도치 팀 (2팀)
* **구성**: SK네트웍스 Family AI 캠프 19기 수강생 팀 기반
* **역할 분담**

  * **JAY**: 정비소 현황 페이지(REPAIR), FAQ, 메인 페이지(Home) 뼈대
  * **팀원 A**: 신차 데이터 수집/검색 (SEARCH)
  * **팀원 B**: 추천 알고리즘 및 데이터 시각화 (RECOMMEND)
  * **팀원 C**: 차량 비교 및 좋아요 통계 (COMPARE)

---

## 2. 프로젝트 개요

* **프로젝트명**: DOCHICHA.Inc
* **주제**: 최근 3년간 자동차등록 데이터를 통한 **트렌드 동향 분석**을 기반으로
  사용자가 **신차를 비교·구매할 수 있도록 지원**하는 데이터 기반 서비스
* **목표**

  * 공공데이터와 크롤링 데이터를 통합해 **데이터 기반 차량 비교·추천 플랫폼** 구현
  * 지역별 정비소 현황을 지도 기반으로 제공하여 **구매 후 유지보수까지 고려** 가능
  * 소비자의 차량 구매 의사결정을 돕는 **원스톱 플랫폼** 구축

---

## 3. 시장 조사

* **데이터 확보 현황**

  * 공공데이터포털: 전국 자동차정비업체 표준데이터 (XML/CSV/JSON/API 확보)
  * 신차 데이터: 다나와 신차 사이트 크롤링 예정 (차량명·가격·제원·이미지)
  * 자동차 등록 현황: 최근 3년간 등록 데이터 활용, 연령대·지역별 트렌드 분석
* **트렌드**

  * 차량 구매 결정 요인: **정비소 접근성, 리콜 이력, 브랜드 신뢰도**
  * **전기차·친환경차 보급 확산** → 등록 현황 및 정비소 데이터 중요성 증대

---

## 4. 주요 기능 (페이지 순서: HOME → SEARCH → RECOMMEND → COMPARE → REPAIR)

1. **\[Home] 메인 페이지**

   * 브랜드 아이덴티티(도·치·카) 강조
   * 최근 등록 데이터/정비소 수 요약 배지 표시
   * 페이지 이동 네비게이션

2. **\[Search] 신차 검색 페이지**

   * 차량명, 가격, 차종, 출시일 기준 검색
   * 다나와 신차 크롤링 데이터 기반

3. **\[Recommend] 추천 페이지**

   * 사용자 입력(연령대, 지역, 차종, 예산) 기반 맞춤형 추천
   * 최근 3년간 등록 현황 데이터와 연계

4. **\[Compare] 차량 비교 페이지**

   * 최대 3개 차량 비교 (제원·가격·안전등급 등)
   * 좋아요 기능 → MySQL COUNT 기반 선호도 집계

5. **\[Repair] 정비소 현황 페이지 (핵심)**

   * 지역별 정비소 검색 및 필터링
   * 지도 시각화 (위도·경도 활용)
   * 전화번호, 평점, 인증 여부 등 상세 제공

6. **\[FAQ] 제조사별 FAQ (부가 기능)**

   * 신차 구매 시 자주 묻는 질문(계약·납기·보증 등) 제공
   * 제조사별 FAQ 크롤링/연동

---

## 5. 기대효과

* **소비자**

  * 최근 3년간 **등록 트렌드 기반 신차 비교** 제공
  * 차량 구매 시 정비소/리콜/FAQ까지 고려한 **합리적 의사결정 지원**
* **학습/팀 성과**

  * 공공데이터+크롤링+DB+시각화 **엔드투엔드 프로젝트 경험**
  * Python, MySQL, Streamlit, Web Crawling 등 학습 내용을 종합 적용
  * GitHub 협업과 데이터 정규화 실습을 통한 실무 능력 강화

---

## 6. 개발환경 (초안)

* **OS**: Windows 11 (로컬 개발 환경)
* **언어/프레임워크**: Python 3.11, Streamlit
* **데이터**:

  * 공공데이터포털 API/CSV/JSON/XML (정비소·등록 현황)
  * 다나와 신차 크롤링 데이터
* **DB**: MySQL (정규화된 스키마 기반, 확장성 고려)
* **협업도구**: GitHub, VSCode
* **추후 고려**: Docker 컨테이너, 클라우드 배포(AWS/GCP)

---
>
project_plan.md 가 우리가 해야할 프로젝트를 파악해주세요.
project_1st/
  app/
    streamlit_app.py          # 메인(Home)
    pages/
      01_Search.py            # 신차 검색
      02_Recommend.py         # 추천
      03_Compare.py           # 비교
      04_Service_Centers.py   # 정비소 현황
      05_FAQ.py               # FAQ (추가 가능)
    components/               # 공통 UI 위젯 모음
  config/
    settings.example.toml      # 설정 예시
  data/
    raw/        # 원본 JSON/CSV/XML
    interim/    # 정제 후 캐시본
    external/   # 외부 참조 데이터
  src/
    ingest/load_sources.py     # 데이터 로더
    cleaning/clean_service_centers.py
    utils/paths.py             # 경로/공통 함수
  notebooks/                   # 데이터 분석/EDA 노트북
  project_plan.md              # 프로젝트 기획서
  README.md                    # 실행 방법/환경 가이드
  .gitignore
  requirements.txt
  .env.example
와 같은 폴더 구조에 맞춰서 project_1st(root) 폴더에 정리해서 만들어주세요.
그리고 코드에 관한 내용은 함께 정리해보겠습니다.

우선 추후에 코드는 복잡하지 않게 구성하고 싶습니다.
여기서 우리는 MySQL에 데이터를 저장할 계획입니다.

지금 현재 "C:\SKN_19\project_1st\research\data\auto_repair_standard.csv"
저는 제가 다운로드한 csv, json, xls 파일이 있습니다.
올바른 폴더 트리로 옮기고 제 프로젝트에 맞는 환경을 우선 구성하고 싶습니다.
>
폴더트리
-
project_1st/
├── app/                    # Streamlit 애플리케이션
│   ├── streamlit_app.py   # 메인 페이지
│   ├── pages/             # 5개 기능별 페이지
│   └── components/        # 공통 UI 위젯
├── config/                # 설정 파일
├── data/                  # 데이터 저장소
│   ├── raw/              # 원본 데이터 (기존 파일들 이동 완료)
│   ├── interim/          # 정제된 데이터
│   └── external/         # 외부 참조 데이터
├── src/                   # 소스 코드
│   ├── ingest/           # 데이터 로더
│   ├── cleaning/         # 데이터 정제
│   └── utils/            # 유틸리티 (경로, 데이터베이스)
└── notebooks/            # 데이터 분석 노트북
>
> Cursor AI
>
완벽합니다! 🎉 DOCHICHA.Inc 프로젝트 환경이 성공적으로 구성되었습니다.
   완료된 작업 요약
✅ 1. 프로젝트 계획서 분석
DOCHICHA.Inc: 자동차 등록 데이터 기반 신차 비교·추천 플랫폼
5개 주요 기능: 검색, 추천, 비교, 정비소 현황, FAQ
MySQL 데이터베이스 기반 구조
✅ 2. 폴더 구조 생성
project_1st/
├── app/                    # Streamlit 애플리케이션
│   ├── streamlit_app.py   # 메인 페이지
│   ├── pages/             # 5개 기능별 페이지
│   └── components/        # 공통 UI 위젯
├── config/                # 설정 파일
├── data/                  # 데이터 저장소
│   ├── raw/              # 원본 데이터 (기존 파일들 이동 완료)
│   ├── interim/          # 정제된 데이터
│   └── external/         # 외부 참조 데이터
├── src/                   # 소스 코드
│   ├── ingest/           # 데이터 로더
│   ├── cleaning/         # 데이터 정제
│   └── utils/            # 유틸리티 (경로, 데이터베이스)
└── notebooks/            # 데이터 분석 노트북
✅ 3. Node.js 환경 설정
package.json 생성 (npm run dev 스크립트 포함)
requirements.txt 생성 (Python 의존성)
환경 설정 파일들 (env.example, settings.example.toml)
✅ 4. Streamlit 애플리케이션 구조
메인 페이지: app/streamlit_app.py
5개 기능 페이지:
01_Search.py - 신차 검색
02_Recommend.py - 맞춤 추천
03_Compare.py - 차량 비교
04_Service_Centers.py - 정비소 현황
05_FAQ.py - FAQ
✅ 5. 데이터 처리 모듈
src/ingest/load_sources.py - 데이터 로더
src/cleaning/clean_service_centers.py - 데이터 정제
src/utils/paths.py - 경로 관리
src/utils/database.py - MySQL 연동
✅ 6. 기존 데이터 파일 이동
research/data/ → data/raw/로 모든 데이터 파일 이동 완료
자동차 정비소 데이터, 자동차 등록 현황 데이터 등
🚀 다음 단계
이제 다음과 같이 프로젝트를 실행할 수 있습니다:
1. 의존성 설치

